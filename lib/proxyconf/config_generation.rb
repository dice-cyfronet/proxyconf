require "stringio"
require "open-uri"

module ProxyConf
  class ConfigGeneration

    def initialize(contexts, proxy_timeout, proxy_send_timeout)
      @contexts = contexts
      @proxy_timeout = proxy_timeout
      @proxy_send_timeout = proxy_send_timeout
    end

    def config_header
      "# DO NOT EDIT THIS FILE!\n# File generated by proxyconf at #{Time.now}\n\n"
    end

    def generate
      upstream = StringIO.new
      proxy    = StringIO.new

      upstream << config_header
      proxy << config_header

      @contexts.each do |context, applications|
      applications.each do |application, services|
        services.each do |service, workers|
          application_service_name = "ctx.#{URI::encode(context)}.app.#{URI::encode(application)}.service.#{URI::encode(service)}"

          # TODO sanitize vm.name
          # TODO Ticket #10
          upstream << "upstream #{application_service_name} { \n"
          upstream << workers.map { |worker| "\tserver #{URI::encode(worker)};"}.join("\n")
          upstream << "\n}\n"

          proxy    << <<-CONFIG
  location /#{URI::encode(context)}/#{URI::encode(application)}/#{URI::encode(service)}/ {
      proxy_read_timeout #{@proxy_timeout};
      proxy_send_timeout #{@proxy_send_timeout};
      proxy_pass http://#{application_service_name}/;
      proxy_set_header X-Path-Prefix \"/#{URI::encode(context)}/#{URI::encode(application)}/#{URI::encode(service)}\";
      proxy_set_header X-Server-Address http://$server_addr:$server_port;
  }
  CONFIG
          end
        end
      end
      [upstream.string, proxy.string]
    end
  end
end
